@startuml

skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
skinparam style strictuml hide empty members

class Main
{

}

package dnd
{
    package entite
    {
        class Entite <<Interface>>
        {
        }

        class Caracteristiques
            {
                ' Membres de la classe
                - m_pv : Integer
                - m_force : Integer
                - m_dexterite : Integer
                - m_vitesse : Integer
                - m_initiative : Integer
                ' Ctor
                + <<create>> Caracteristiques(pv : Integer, force : Integer, dexterite : Integer, vitesse : Integer, initiative : Integer)
                ' Getters
                + getPV() : Integer
                + getForce() : Integer
                + getDexterite() : Integer
                + getVitese() : Integer
                + getInitiative() : Integer
                ' Setters
                + setPV(pv : Integer)
                + toString() : String
            }

            Interface Initiative <<Interface>>
            {
                +getInitiative()
            }

            package personnage
            {
                class Personnage implements dnd.entite.Initiative, dnd.entite.Entite
                {
                    +<<create>> Personnage(race : Race, classe : Classe)
                    - m_nom : String
                    - m_etat : Boolean
                    ' Race : mettre une composition
                    ' Classe : mettre une composition
                    ' Inventaire d'équipements : mettre une composition
                    ' Équipements : mettre une composition
                    + getNom() : String
                    + getEtat() : Boolean
                    + toString() : String
                }

                ' Début classes personnages

                class Inventaire
                {
                    - m_inventaire : Item[*]
                    + toString() : String
                }

                class EquipementPersonnage
                {
                    - m_equipement : Item[*]
                    + toString() : String
                }

                Personnage "*" *--> "1" race.Race
                Personnage "*" *--> classe.Classe
                Personnage "*" *--> "1" Caracteristiques : possède
                Personnage "1" *--> "est équipé de" EquipementPersonnage
                Personnage "1" *--> "possède" Inventaire : possède
                Inventaire "*" o-- "- m_items[*] : Objets du personnage" dnd.objet.Item : possède
                EquipementPersonnage "1" o-- "- m_arme_equipee : Arme\n - m_armure_equipee : Armure" dnd.objet.Item

                package race
                {
                    abstract class Race <<abstract>>
                    {
                        +{abstract} bonusCreation()
                        +{abstract} toString()
                    }

                    class Humain
                    {
                        +<<create>> Humain()
                    }

                    class Elfe
                    {
                        +<<create>> Elfe()
                    }

                    class Nain
                    {
                        +<<create>> Nain()
                    }

                    class Halflin
                    {
                        +<<create>> Halflin()
                    }

                    Race "*" *--> "Peut être" Humain
                    Race "*" *--> "Peut être" Elfe
                    Race "*" *--> "Peut être" Nain
                    Race "*" *--> "Peut être" Halflin
                }

                package classe
                {
                    abstract class Classe <<abstract>>
                    {
                        +{abstract} bonusCreation()
                        +{abstract} toString()
                    }

                    class Guerrier
                    {
                        +<<create>>  Guerrier()
                    }

                    class Clerc
                    {
                        +<<create>> Clerc()
                    }

                    class Magiciens
                    {
                        +<<create>> Magiciens()
                    }

                    class Roublard
                    {
                        +<<create>> Roublard()
                    }

                    Classe "*" *--> "1" Guerrier : peut être
                    Classe "*" *--> "1" Clerc : peut être
                    Classe "*" *--> "1" Magiciens : peut être
                    Classe "*" *--> "1" Roublard : peut être
                }
            }

            package ennemi
            {
                class Monstre implements dnd.entite.Initiative, dnd.entite.Entite
                {
                    +<<create>> Monstre
                    + {static} m_id : Integer
                    - m_espece : String
                    - m_attaque :
                    ' Objet caractérisitique

                    ' Faire une énumeration des especes pour acceder à leurs caractéristique
                }
            }
    }





    package objet
    {
        class Item
        {
            - m_nom : String
            + <<create>> Item(name : String)
            + getName() : String
        }

        class Arme extends Item
        {
            - m_degat : Integer
            + <<create>> Arme(name : String, degat : Integer)
        }

        class Armure extends Item
        {
            - m_armure : Integer
            + <<create>> Armure(name : String, armure : Integer)
        }

        class ArmeCourante extends Arme
        {

        }

        class ArmeGuerre extends Arme
        {

        }

        class ArmeDistance extends Arme
        {

        }

        class ArmureLegere extends Armure
        {

        }

        class ArmureLourde extends Armure
        {

        }


    ' Item "*" *--> "- m_degat : (dé)\n- m_portee : Integer" ArmeCourante: contient des
    ' Item "*" *--> "- m_degat : (dé)\n- m_portee : Integer" ArmeGuerre: contient des
    ' Item "*" *--> "- m_degat : (dé)\n- m_portee : Integer" ArmeDistance: contient des
    ' Item "*" *--> "- m_armure : Integer" ArmureLegere: contient des
    ' Item "*" *--> "- " ArmureLourde: contient des

    }

    package donjon
    {
        class Carte
        {
            +<<create>> Carte
            ' un choix de carte par défaut
            ' instancie     taille de la carte
            '               position des obstacle
            '               creer les monstre
            '               positionne monstre et personnage
            '               positionne equipement
            '               phrases de contexte
            + getQuoiEstIci(position : Position) : Entite ?
            ' ici le type, je ne sais pas, car ça peut tout retourner, j'aurais mis Object mais il faudrait utiliser getClass() dans le code (interdit); solution possible : créer une classe "Entité" qui est implémentée par Monstre, Personnage, etc pour plus de flexibilité.
            ' methode getOuEsTruc (truc)
            ' EDIT : du coup ici bah c'est "bon" on verra comment ça rend dans le code

        }

        Carte "*" *--> "- m_listeEntitePosition[*] : Position selon l'Entite (hashmap)" dnd.entite.Entite : possède
        Carte "*" *--> "- m_listPositionEntite[*] : L'Entite selon la Position (hashmap)" dnd.entite.Entite : possède

        class Position
        {
            -m_x : Integer
            -m_y : Integer
        }
    }

    package ennemi
    {
        class Monstre implements dnd.Initiative
        {
        +<<create>> Monstre
        + {static} m_id : Integer
        - m_espece : String
        - m_attaque :
        ' Objet caractérisitique

        ' Faire une énumeration des especes pour acceder à leurs caractéristique
        }
    }

    package tourDeJeu
    {
        class Action
        {

        }

        class Tour
        {
            -m_numeroDuTour : Integer
            ' methode déroulement du tour
            -m_ordre : [*] 'contient les monstres et personnages dans l'ordre de leur initiative
            'methode qui enleve un monstre ou personnage mort de m_ordre

        }



        class seDeplacer extends Action
        {
            +void deplacement (entitée : ""Objet monstre ou personnage"", destination : Position )
            ' deplacement(): 2 choix:
            ' soit un par appel par case, comme si on déplacait l'entitée case par case, donc:
            '                                   test si destination est adjacent
            '                                   puis test si case destination est libre
            '                                   puis test si il reste des point de mouvement à l'entité
            '                                   puis déplacement
            '
            ' soit un appel pour tout le déplacement, plus en accord avec le sujet;
            '                                   test si case destination est libre
            '                                   test si distance inférieure à  vitesse/3
            '                                   déplacement


        }

        class Attaquer extends Action
        {
            +void attaque (attaquant : Entité, defenseur : Entité)
            '   test que personnage n'attaque pas personnage et monstre n'attaque pas monstre
            '   test portée (faut il une méthode de calcul de distance?)
            '   jet d'attaque : 1d20 + attaquant.m_equipement(getCaractéristiqueAttaque())
            '                   (dans classe arme, il faut une méthode qui cherche la force ou la dex de l'entité pour l'additionner
            '                                       et une pour lancer le dé de dégat careespondant)
            '   test si jet d'attaque > defenseur.m_equipement(getArmure())
            '   degat: entitée.m_equipement(jetDeDégat())
            '           defenseur.setPV(getPV()-degat)
            '           test état du défenseur

        }

        class sEquiper extends Action
        {
            +void prendre(personnage : Personnage)
            ' test si un equipement présent sur la position du personnage
            ' personnage.m_Inventaire(ajoutEquipement(carte.getQuoiEstIci)
            ' supprimer l'objet de la map
        }

    }
}



@enduml
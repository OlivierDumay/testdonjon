@startuml

skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
skinparam style strictuml hide empty members
'skinparam linetype ortho

'dnd/
'   Affichage/
'   des/
'   partie/
'       donjon/
'   gameObject/
'       personnage/
'           race/
'           classe/
'       ennemi/
'       objet/


class Main
{

}

package dnd
{
    package affichage
    {
        class Affichage
        {
            + void afficherInfoDonjon
            + void afficherCarte
            + void afficherInfoPerso
            + void afficherInfoTour
            + afficherCreaPerso: string[*]
            + void afficherCreaMonstreObjet
        }
    }
    package des
    {
        class Des
        {
            +Integer lancerDes (nombreDeDes : Integer, nombreDeFace : Integer)
        }
    }

    package partie
    {
        package donjon
        {
            class Carte
            {
                -m_max_x : Integer
                -m_max_y : Case
                -m_grille[*] : Case  'grille[int][int] = Case
                -m_emplacementAsset : Map<id : String, position : Position>
                +<<create>> Carte (x : Integer, y : Integer)
                + getQuoiEstIci(ici : Case) : Asset[*]
                + getOuEstQuoi(quoi : Asset) : Position
                + void addAsset(asset : Asset, cse : Case)
                + void removeAsset(asset : Asset, cse : Case)
                + getMaxX() : Integer
                + getMaxY() : Integer
            }

            class Case
            {
                -m_x : Integer
                -m_y : Integer
                -m_listAsset[*] : Asset
                + <<create>> Case (position : Position)
                + calculDistance(destination_x : Integer, destination_y: Integer) : Float
                + getContenu() : Asset[*]
                + getX(): Integer
                + getY() : Integer
                + equalsPosition (other Case) : boolean
            }
        }
         class TourDeJeu
        {
            -m_numeroDuTour : Integer
            +<<create>> TourDeJeu
            'contient les monstres et personnages dans l'ordre de leur initiative
            ' methode déroulement du tour : appel des gameObject dans l'ordre d'initiative
            'methode qui enleve un monstre ou personnage mort de m_ordre
        }

        class Ordre
        {
            -m_ordre : [*]
            +<<create>> Ordre
            + void triage()
            + void ajouterAsset()
            + void supprimerAsset()
        }

        class Partie
        {
            - perso : Personnage
            +<<create>> Partie
        }
    }

    package gameObject
    {
        package personnage
        {
            package race
            {
                abstract class Race <<abstract>>
                {
                    +{abstract} bonusCreation()
                    +{abstract} toString()
                }

                class Humain
                {
                    +<<create>> Humain()
                }

                class Elfe
                {
                    +<<create>> Elfe()
                }

                class Nain
                {
                    +<<create>> Nain()
                }

                class Halflin
                {
                    +<<create>> Halflin()
                }
            }

            package classe
            {
                abstract class Classe <<abstract>>
                {
                    +{abstract} bonusCreation()
                    +{abstract} toString()
                }

                class Guerrier
                {
                    +<<create>>  Guerrier()
                }

                class Clerc
                {
                    +<<create>> Clerc()
                }

                class Magiciens
                {
                    +<<create>> Magiciens()
                }

                class Roublard
                {
                    +<<create>> Roublard()
                }
            }

            class Personnage implements  dnd.gameObject.GameObject
            {
                +<<create>> Personnage(race : Race, classe : Classe)
                - m_nom : String
                - m_etat : Boolean
                - m_etiquette : String
                ' Race : mettre une composition
                ' Classe : mettre une composition
                ' Inventaire d'équipements : mettre une composition
                ' Équipements : mettre une composition
                + getNom() : String
                + getEtat() : Boolean
                + toString() : String

                + void deplacement (destination : Position )
                + void attaque (defenseur : GameObject)
                + void prendre(personnage : GameObject)

                + getPV() : Integer
            }

            class Inventaire
            {
                + toString() : String
            }

            class EquipementPersonnage
            {
                + toString() : String
            }
        }

        package ennemi
        {
            class Monstre implements dnd.gameObject.GameObject
            {
                +<<create>> Monstre
                + {static} m_id : Integer
                - m_espece : String
                - m_attaque :
                - m_etiquette : String
                ' Objet caractérisitique

                ' Faire une énumeration des especes pour acceder à leurs caractéristique
                +void deplacement (destination : Position )
                +void attaque (defenseur : GameObject)
            }
        }

        package objet
        {
            class Item implements dnd.Asset
            {
                - m_nom : String
                - m_etiquette : String
                + <<create>> Item(name : String)
                + getName() : String
            }

            class Arme extends Item
            {
                - m_deDegat : Integer
                - m_nbDe : Integer
                - m_portee : Interger
                + <<create>> Arme(name : String, degat : Integer)
            }

            class Armure extends Item
            {
                - m_armure : Integer
                + <<create>> Armure(name : String, armure : Integer)
            }

            class ArmeCourante extends Arme
            {

            }

            class ArmeGuerre extends Arme
            {

            }

            class ArmeDistance extends Arme
            {

            }

            class ArmureLegere extends Armure
            {

            }

            class ArmureLourde extends Armure
            {

            }
        }

        interface GameObject <<Interface>> implements dnd.Asset
        {
            +void deplacement (destination : Position )
            +void attaque (defenseur : GameObject)
            +void prendre(personnage : GameObject)
            +getEtiquette(objet : GameObject)
        }

        class Caracteristiques
        {
            ' Membres de la classe
            - m_pv : Integer
            - m_force : Integer
            - m_dexterite : Integer
            - m_vitesse : Integer
            - m_initiative : Integer
            ' Ctor
            + <<create>> Caracteristiques(pv : Integer, force : Integer, dexterite : Integer, vitesse : Integer, initiative : Integer)
            ' Getters
            + getPV() : Integer
            + getForce() : Integer
            + getDexterite() : Integer
            + getVitese() : Integer
            + getInitiative() : Integer
            ' Setters
            + setPV(pv : Integer)
            + toString() : String
        }
    }

    interface Asset <<interface>>
    {
        -m_position : Position
        +getEtiquette() : Etiquette
    }

    class Obstacle implements dnd.Asset
    {
        -m_etiquette : String
        +<<create>> Obstacle
        + getEtiquette :  String
    }
}

'ARBORESCENCE et CLASSE
'dnd/ASSET
'   des/DES
'   partie/TOURDEJEU-ORDRE
'       donjon/CARTE-CASE-POSITION
'   gameObject/GAMEOBJECT-CARACTERISTIQUE
'       personnage/PERSONNAGE-INVENTAIRE-EQUIPEMENTPERSONNAGE
'           race/HUMAIN-ELFE-NAIN-HALFLIN
'           classe/GUERRIER-CLERC-MAGICIEN-ROUBLARD
'       ennemi/MONSTRE
'       objet/ITEM-ARME-ARMURE(et leurs impléments)


'Relations
dnd.Asset "*" o--> "2..*\nm_listAsset" dnd.partie.donjon.Carte : est sur la carte



dnd.partie.donjon.Case "1" *--> "1\nm_grille" dnd.partie.donjon.Carte : belongs to
'dnd.partie.donjon.Carte "*" *--> "- m_listeGameObjectPosition[*] : Position selon GameObject (hashmap)" dnd.GameObject.GameObject : possède
'dnd.partie.donjon.Carte "*" *--> "- m_listPositionGameObject[*] : GameObject selon la Position (hashmap)" dnd.GameObject.GameObject : possède

'dnd.partie.donjon.Position "1" *-->  "- m_position : Position" dnd.partie.donjon.Case

'dnd.gameObject.Personnage "*" *--> "1" dnd.gameObject.personnage.Race
'dnd.gameObject.Personnage "*" *--> dnd.gameObject.personnage.Classe
'dnd.gameObject.Personnage "*" *--> "1" dnd.gameObject.Caracteristiques : possède
'dnd.gameObject.Personnage "1" *--> "est équipé de" dnd.gameObject.personnage.EquipementPersonnage
'dnd.gameObject.Personnage "1" *--> "possède" dnd.gameObject.personnage.Inventaire : possède

'dnd.gameObject.personnage.Inventaire "*" o--  "*\n- m_items : Objets du personnage" dnd.gameObject.objet.Item : possède

'dnd.gameObject.personnage.EquipementPersonnage "1" o-- "- m_arme_equipee : Arme\n - m_armure_equipee : Armure" dnd.gameObject.objet.Item : est équipé de

'Race "*" *--> "Peut être" Humain
'Race "*" *--> "Peut être" Elfe
'Race "*" *--> "Peut être" Nain
'Race "*" *--> "Peut être" Halflin

'Classe "*" *--> "1" Guerrier : peut être
'Classe "*" *--> "1" Clerc : peut être
'Classe "*" *--> "1" Magiciens : peut être
'Classe "*" *--> "1" Roublard : peut être

' Item "*" *--> "- m_degat : (dé)\n- m_portee : Integer" ArmeCourante: contient des
' Item "*" *--> "- m_degat : (dé)\n- m_portee : Integer" ArmeGuerre: contient des
' Item "*" *--> "- m_degat : (dé)\n- m_portee : Integer" ArmeDistance: contient des
' Item "*" *--> "- m_armure : Integer" ArmureLegere: contient des
' Item "*" *--> "- " ArmureLourde: contient des

@enduml

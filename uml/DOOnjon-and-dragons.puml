@startuml

skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
skinparam style strictuml hide empty members
'skinparam linetype ortho

'dnd/
'   des/
'   partie/
'       tourDeJeu/
'       donjon/
'   gameObject/
'       personnage/
'           race/
'           classe/
'       ennemi/
'       objet/


class Main
{

}

package dnd
{
    package des
    {
        class Des
        {
            +Integer lancerDes (nombreDeDes : Integer, nombreDeFace : Integer)
        }
    }



    package partie
    {
        package tourDeJeu
        {

            class Tour
            {
                -m_numeroDuTour : Integer
                ' methode déroulement du tour
                -m_ordre : [*] 'contient les monstres et personnages dans l'ordre de leur initiative
                'methode qui enleve un monstre ou personnage mort de m_ordre
            }

        }

        package donjon
        {
            class Carte
            {
                +<<create>> Carte
                ' un choix de carte par défaut
                ' instancie     taille de la carte
                '               position des obstacle
                '               creer les monstre
                '               positionne monstre et personnage
                '               positionne equipement
                '               phrases de contexte
                + getQuoiEstIci(position : Position) : GameObject ?
                ' ici le type, je ne sais pas, car ça peut tout retourner, j'aurais mis Object mais il faudrait utiliser getClass() dans le code (interdit); solution possible : créer une classe "Entité" qui est implémentée par Monstre, Personnage, etc pour plus de flexibilité.
                ' methode getOuEsTruc (truc)
                ' EDIT : du coup ici bah c'est "bon" on verra comment ça rend dans le code

            }

            class Case {
                -Asset listeAsset[*]
            }

            class Position
            {
                -m_x : Integer
                -m_y : Integer
                +calculDistance(origine : GameObject, destination : Position)
            }

        }
    }

    package gameObject
    {
        package personnage
        {
            package race
            {
                abstract class Race <<abstract>>
                {
                    +{abstract} bonusCreation()
                    +{abstract} toString()
                }

                class Humain
                {
                    +<<create>> Humain()
                }

                class Elfe
                {
                    +<<create>> Elfe()
                }

                class Nain
                {
                    +<<create>> Nain()
                }

                class Halflin
                {
                    +<<create>> Halflin()
                }
            }

            package classe
            {
                abstract class Classe <<abstract>>
                {
                    +{abstract} bonusCreation()
                    +{abstract} toString()
                }

                class Guerrier
                {
                    +<<create>>  Guerrier()
                }

                class Clerc
                {
                    +<<create>> Clerc()
                }

                class Magiciens
                {
                    +<<create>> Magiciens()
                }

                class Roublard
                {
                    +<<create>> Roublard()
                }
            }

        package ennemi
        {
            class Monstre implements dnd.gameObject.GameObject
            {
                +<<create>> Monstre
                + {static} m_id : Integer
                - m_espece : String
                - m_attaque :
                - m_etiquette : String
                ' Objet caractérisitique

                ' Faire une énumeration des especes pour acceder à leurs caractéristique
                +void deplacement (destination : Position )
                +void attaque (defenseur : GameObject)
            }
        }

        package objet
        {
            class Item
            {
                - m_nom : String
                - m_etiquette : String
                + <<create>> Item(name : String)
                + getName() : String

            }

            class Arme extends Item
            {
                - m_degat : Integer
                + <<create>> Arme(name : String, degat : Integer)
            }

            class Armure extends Item
            {
                - m_armure : Integer
                + <<create>> Armure(name : String, armure : Integer)
            }

            class ArmeCourante extends Arme
            {

            }

            class ArmeGuerre extends Arme
            {

            }

            class ArmeDistance extends Arme
            {

            }

            class ArmureLegere extends Armure
            {

            }

            class ArmureLourde extends Armure
            {

            }
        }

        class Personnage implements  dnd.GameObject.GameObject
        {
            +<<create>> Personnage(race : Race, classe : Classe)
            - m_nom : String
            - m_etat : Boolean
            - m_etiquette : String
            ' Race : mettre une composition
            ' Classe : mettre une composition
            ' Inventaire d'équipements : mettre une composition
            ' Équipements : mettre une composition
            + getNom() : String
            + getEtat() : Boolean
            + toString() : String

            +void deplacement (destination : Position )
            +void attaque (defenseur : GameObject)
            +void prendre(personnage : GameObject)
        }

        class Inventaire
        {
            + toString() : String
        }

        class EquipementPersonnage
        {
            + toString() : String
        }
    }

        interface GameObject <<Interface>>
        {
            +void deplacement (destination : Position )
            +void attaque (defenseur : GameObject)
            +void prendre(personnage : GameObject)
            +getEtiquette(objet : GameObject)
        }

        class Caracteristiques
            {
                ' Membres de la classe
                - m_pv : Integer
                - m_force : Integer
                - m_dexterite : Integer
                - m_vitesse : Integer
                - m_initiative : Integer
                ' Ctor
                + <<create>> Caracteristiques(pv : Integer, force : Integer, dexterite : Integer, vitesse : Integer, initiative : Integer)
                ' Getters
                + getPV() : Integer
                + getForce() : Integer
                + getDexterite() : Integer
                + getVitese() : Integer
                + getInitiative() : Integer
                ' Setters
                + setPV(pv : Integer)
                + toString() : String
            }
    }
}

Personnage "*" *--> "1" race.Race
Personnage "*" *--> classe.Classe
Personnage "*" *--> "1" Caracteristiques : possède
Personnage "1" *--> "est équipé de" EquipementPersonnage
Personnage "1" *--> "possède" Inventaire : possède

Inventaire "*" o--  "*\n- m_items : Objets du personnage" dnd.objet.Item : possède

EquipementPersonnage "1" o-- "- m_arme_equipee : Arme\n - m_armure_equipee : Armure" dnd.objet.Item : est équipé de

Race "*" *--> "Peut être" Humain
Race "*" *--> "Peut être" Elfe
Race "*" *--> "Peut être" Nain
Race "*" *--> "Peut être" Halflin

Classe "*" *--> "1" Guerrier : peut être
Classe "*" *--> "1" Clerc : peut être
Classe "*" *--> "1" Magiciens : peut être
Classe "*" *--> "1" Roublard : peut être

' Item "*" *--> "- m_degat : (dé)\n- m_portee : Integer" ArmeCourante: contient des
' Item "*" *--> "- m_degat : (dé)\n- m_portee : Integer" ArmeGuerre: contient des
' Item "*" *--> "- m_degat : (dé)\n- m_portee : Integer" ArmeDistance: contient des
' Item "*" *--> "- m_armure : Integer" ArmureLegere: contient des
' Item "*" *--> "- " ArmureLourde: contient des

Carte "*" *--> "- m_listeGameObjectPosition[*] : Position selon GameObject (hashmap)" dnd.GameObject.GameObject : possède
Carte "*" *--> "- m_listPositionGameObject[*] : GameObject selon la Position (hashmap)" dnd.GameObject.GameObject : possède

Position "1" *-->  "- m_position : Position" Case



@enduml
